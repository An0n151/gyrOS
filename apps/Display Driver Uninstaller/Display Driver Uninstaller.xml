<?xml version="1.0"?>
<doc>
<assembly>
<name>
Display Driver Uninstaller
</name>
</assembly>
<members>
<member name="T:Display_Driver_Uninstaller.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.Resources.Resources.amd_logo">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.Resources.Resources.btn_donate_LG">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.Resources.Resources.creative_logo">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.Resources.Resources.DDU">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.Resources.Resources.ddu_logo">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.Resources.Resources.intel_logo">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.Resources.Resources.nvidia_logo">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.Resources.Resources.realtek_logo">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="T:Display_Driver_Uninstaller.My.MyWpfExtension">
 <summary>
 Module used to define the properties that are available in the My Namespace for WPF
 </summary>
 <remarks></remarks>
</member>
<member name="P:Display_Driver_Uninstaller.My.MyWpfExtension.Application">
 <summary>
 Returns the application object for the running application
 </summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.MyWpfExtension.Computer">
 <summary>
 Returns information about the host computer.
 </summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.MyWpfExtension.User">
 <summary>
 Returns information for the current user.  If you wish to run the application with the current 
 Windows user credentials, call My.User.InitializeWithWindowsUser().
 </summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.MyWpfExtension.Log">
 <summary>
 Returns the application log. The listeners can be configured by the application's configuration file.
 </summary>
</member>
<member name="P:Display_Driver_Uninstaller.My.MyWpfExtension.Windows">
 <summary>
 Returns the collection of Windows defined in the project.
 </summary>
</member>
<member name="M:Display_Driver_Uninstaller.CleanupEngine.CleanAllFilesInDirectory(System.IO.DirectoryInfo)">
 Iterates through all files in the directory passed into
 method and deletes them.
 It may be necessary to wrap this call in impersonation or ensure parent directory
 permissions prior, because delete permissions are not guaranteed.
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.READONLY">
 <summary>A file that is read-only.
 Applications can read the file, but cannot write to it or delete it.
 This attribute is not honored on directories.
 For more information, see "You cannot view or change the Read-only or
 the System attributes of folders in Windows Server 2003, in Windows XP, or in Windows Vista.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.HIDDEN">
 <summary>The file or directory is hidden.
 It is not included in an ordinary directory listing.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.SYSTEM">
 <summary>A file or directory that the operating system uses a part of, or uses exclusively.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.DIRECTORY">
 <summary>Files cannot be converted into directories.
 To create a directory, use the CreateDirectory or CreateDirectoryEx function.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.ARCHIVE">
 <summary>A file or directory that is an archive file or directory.
 Applications typically use this attribute to mark files for backup or removal.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.DEVICE">
 <summary>Reserved; do not use.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.NORMAL">
 <summary>A file that does not have other attributes set.
 This attribute is valid only when used alone.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.TEMPORARY">
 <summary>A file that is being used for temporary storage.
 File systems avoid writing data back to mass storage if sufficient cache memory is available,
 because typically, an application deletes a temporary file after the handle is closed.
 In that scenario, the system can entirely avoid writing the data. Otherwise,
 the data is written after the handle is closed.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.SPARSE_FILE">
 <summary>To set a file's sparse attribute, use the DeviceIoControl function with the FSCTL_SET_SPARSE operation.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.REPARSE_POINT">
 <summary>To associate a reparse point with a file or directory, use the DeviceIoControl function with the FSCTL_SET_REPARSE_POINT operation.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.COMPRESSED">
 <summary>To set a file's compression state, use the DeviceIoControl function with the FSCTL_SET_COMPRESSION operation.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.OFFLINE">
 <summary>The data of a file is not available immediately.
 This attribute indicates that the file data is physically moved to offline storage.
 This attribute is used by Remote Storage, which is the hierarchical storage management software.
 Applications should not arbitrarily change this attribute.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.NOT_CONTENT_INDEXED">
 <summary>The file or directory is not to be indexed by the content indexing service.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.ENCRYPTED">
 <summary>To create an encrypted file, use the CreateFile function with the FILE_ATTRIBUTE_ENCRYPTED attribute.
 To convert an existing file into an encrypted file, use the EncryptFile function.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_BACKUP_SEMANTICS">
 <summary>The file is being opened or created for a backup or restore operation.
 The system ensures that the calling process overrides file security checks when the process
 has SE_BACKUP_NAME and SE_RESTORE_NAME privileges. For more information, see Changing Privileges in a Token.

 You must set this flag to obtain a handle to a directory. 
 A directory handle can be passed to some functions instead of a file handle. 
 For more information, see the Remarks section.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_DELETE_ON_CLOSE">
 <summary>The file is to be deleted immediately after all of its handles are closed,
 which includes the specified handle and any other open or duplicated handles.

 If there are existing open handles to a file,
 the call fails unless they were all opened with the FILE_SHARE_DELETE share mode.

 Subsequent open requests for the file fail, unless the FILE_SHARE_DELETE share mode is specified.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_NO_BUFFERING">
 <summary>The file or device is being opened with no system caching for data reads and writes.
 This flag does not affect hard disk caching or memory mapped files.

 There are strict requirements for successfully working with files opened with CreateFile
 using the FILE_FLAG_NO_BUFFERING flag, for details see File Buffering.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_OPEN_NO_RECALL">
 <summary>The file data is requested, but it should continue to be located in remote storage.
 It should not be transported back to local storage. This flag is for use by remote storage systems.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_OPEN_REPARSE_POINT">
 <summary>Normal reparse point processing will not occur;
 CreateFile will attempt to open the reparse point. When a file is opened,
 a file handle is returned, whether or not the filter that controls the reparse point is operational.

 This flag cannot be used with the CREATE_ALWAYS flag.

 If the file is not a reparse point, then this flag is ignored.

 For more information, see the Remarks section.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_OVERLAPPED">
 <summary>The file or device is being opened or created for asynchronous I/O.
 
 When subsequent I/O operations are completed on this handle,
 the event specified in the OVERLAPPED structure will be set to the signaled state.
 
 If this flag is specified, the file can be used for simultaneous read and write operations.
 
 If this flag is not specified, then I/O operations are serialized,
 even if the calls to the read and write functions specify an OVERLAPPED structure.
 
 For information about considerations when using a file handle created with this flag,
 see the Synchronous and Asynchronous I/O Handles section of this topic.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_POSIX_SEMANTICS">
 <summary>Access will occur according to POSIX rules.
 This includes allowing multiple files with names, differing only in case,
 for file systems that support that naming. Use care when using this option,
 because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit Windows.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_RANDOM_ACCESS">
 <summary>Access is intended to be random. The system can use this as a hint to optimize file caching.
 
 This flag has no effect if the file system does not support cached I/O and FILE_FLAG_NO_BUFFERING.
 
 For more information, see the Caching Behavior section of this topic.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_SESSION_AWARE">
 <summary>The file or device is being opened with session awareness.
 If this flag is not specified, then per-session devices (such as a device using RemoteFX USB Redirection)
 cannot be opened by processes running in session 0. This flag has no effect for callers not in session 0.
 This flag is supported only on server editions of Windows.

 Windows Server 2008 R2 and Windows Server 2008:  This flag is not supported before Windows Server 2012.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_SEQUENTIAL_SCAN">
 <summary>Access is intended to be sequential from beginning to end.
 The system can use this as a hint to optimize file caching.
 
 This flag should not be used if read-behind (that is, reverse scans) will be used.
 
 This flag has no effect if the file system does not support cached I/O and FILE_FLAG_NO_BUFFERING.
 
 For more information, see the Caching Behavior section of this topic.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.FILE_ATTRIBUTES.FLAG_WRITE_THROUGH">
 <summary>Write operations will not go through any intermediate cache, they will go directly to disk.
 For additional information, see the Caching Behavior section of this topic.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.MoveFileFlags.MOVEFILE_REPLACE_EXISTING">
 <summary>
If a file named lpNewFileName exists, the function replaces its contents with the contents of the lpExistingFileName file, provided that security requirements regarding access control lists (ACLs) are met. For more information, see the Remarks section of this topic.
This value cannot be used if lpNewFileName or lpExistingFileName names a directory.
 </summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.MoveFileFlags.MOVEFILE_COPY_ALLOWED">
 <summary>
If the file is to be moved to a different volume, the function simulates the move by using the CopyFile and DeleteFile functions.
If the file is successfully copied to a different volume and the original file is unable to be deleted, the function succeeds leaving the source file intact.
This value cannot be used with MOVEFILE_DELAY_UNTIL_REBOOT.
 </summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.MoveFileFlags.MOVEFILE_DELAY_UNTIL_REBOOT">
 <summary>
 The system does not move the file until the operating system is restarted. The system moves the file immediately after AUTOCHK is executed, but before creating any paging files. Consequently, this parameter enables the function to delete paging files from previous startups.
This value can be used only if the process is in the context of a user who belongs to the administrators group or the LocalSystem account.
This value cannot be used with MOVEFILE_COPY_ALLOWED.
 </summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.MoveFileFlags.MOVEFILE_WRITE_THROUGH">
 <summary>
 The function does not return until the file is actually moved on the disk.
Setting this value guarantees that a move performed as a copy and delete operation is flushed to disk before the function returns. The flush occurs at the end of the copy operation.
This value has no effect if MOVEFILE_DELAY_UNTIL_REBOOT is set.
 </summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.MoveFileFlags.MOVEFILE_CREATE_HARDLINK">
 <summary>
 Reserved for future use.
 </summary>
</member>
<member name="F:Display_Driver_Uninstaller.FileIO.MoveFileFlags.MOVEFILE_FAIL_IF_NOT_TRACKABLE">
 <summary>
 The function fails if the source file is a link source, but the file cannot be tracked after the move. This situation can occur if the destination is a volume formatted with the FAT file system.
 </summary>
</member>
<member name="T:Display_Driver_Uninstaller.frmSystemRestore">
<summary>
frmSystemRestore
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.frmSystemRestore.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE">
 <remarks>https://technet.microsoft.com/en-us/library/dd349804%28v=ws.10%29.aspx</remarks>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.ASSIGNPRIMARYTOKEN_NAME">
 <summary>Allows a parent process to replace the access token that is associated with a child process.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.AUDIT_NAME">
 <summary>Allows a process to generate entries in the security log.
 The security log is used to trace unauthorized system access. (See also "Manage auditing and security log" in this table.)</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.BACKUP_NAME">
 <summary>Allows the user to circumvent file and directory permissions to back up the system.
 The privilege is selected only when an application attempts access through the NTFS backup application programming interface (API).
 Otherwise, normal file and directory permissions apply.
 
 By default, this privilege is assigned to Administrators and Backup Operators. (See also "Restore files and directories" in this table.) </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.CHANGE_NOTIFY_NAME">
 <summary>Allows the user to pass through folders to which the user otherwise has no access while navigating an object path
 in any Microsoft® Windows® file system or in the registry. This privilege does not allow the user to list the contents of a folder
 it allows the user only to traverse its directories.
 By default, this privilege is assigned to Administrators, Backup Operators, Power Users, Users, and Everyone.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.CREATE_GLOBAL_NAME">
 <summary> Required to create named file mapping objects in the global namespace during Terminal Services sessions.
 This privilege is enabled by default for administrators, services, and the local system account.
 User Right: Create global objects. Windows XP/2000: This privilege is not supported.
 
 Note that this value is supported starting with Windows Server 2003, Windows XP with SP2, and Windows 2000 with SP4.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.CREATE_PAGEFILE_NAME">
 <summary>Allows the user to create and change the size of a pagefile. 
 This is done by specifying a paging file size for a particular drive under Performance Options on the Advanced tab of System Properties.
 
 By default, this privilege is assigned to Administrators. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.CREATE_PERMANENT_NAME">
 <summary>Allows a process to create a directory object in the Windows 2000 object manager.
 This privilege is useful to kernel-mode components that extend the Windows 2000 object namespace.
 
 Components that are running in kernel mode already have this privilege assigned to them;
 it is not necessary to assign them the privilege.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.CREATE_TOKEN_NAME">
 <summary>Allows a process to create an access token by calling NtCreateToken() or other token-creating APIs.
 When a process requires this privilege, use the LocalSystem account (which already includes the privilege),
 rather than create a separate user account and assign this privilege to it. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.DEBUG_NAME">
 <summary>Allows the user to attach a debugger to any process.
 This privilege provides access to sensitive and critical operating system components.
 
 By default, this privilege is assigned to Administrators. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.ENABLE_DELEGATION_NAME">
 <summary>Allows the user to change the Trusted for Delegation setting on a user or computer object in Active Directory. 
 The user or computer that is granted this privilege must also have write access to the account control flags on the object.
 
 Delegation of authentication is a capability that is used by multi-tier client/server applications. 
 It allows a front-end service to use the credentials of a client in authenticating to a back-end service. 
 For this to be possible, both client and server must be running under accounts that are trusted for delegation.
 
 Misuse of this privilege or the Trusted for Delegation settings can make the network vulnerable to sophisticated attacks on the system
 that use Trojan horse programs, which impersonate incoming clients and use their credentials to gain access to network resources. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.IMPERSONATE_NAME">
 <summary>Required to impersonate. 
 User Right: Impersonate a client after authentication. Windows XP/2000: This privilege is not supported.
 
 Note that this value is supported starting with Windows Server 2003, Windows XP with SP2, and Windows 2000 with SP4.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.INCREAQUOTA_NAME">
 <summary>Allows a process that has Write Property access to another process to increase the processor quota that is assigned to the other process.
 This privilege is useful for system tuning, but it can be abused, as in a denial-of-service attack.
 
 By default, this privilege is assigned to Administrators. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.INC_BAPRIORITY_NAME">
 <summary>Allows a process that has Write Property access to another process to increase the execution priority of the other process.
 A user with this privilege can change the scheduling priority of a process in the Task Manager dialog box.
 
 By default, this privilege is assigned to Administrators. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.LOAD_DRIVER_NAME">
 <summary>Allows a user to install and uninstall Plug and Play device drivers. 
 This privilege does not apply to device drivers that are not Plug and Play; 
 these device drivers can be installed only by Administrators. 
 
 Note that device drivers run as trusted (highly privileged) programs; 
 a user can abuse this privilege by installing hostile programs and giving them destructive access to resources.
 
 By default, this privilege is assigned to Administrators. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.LOCK_MEMORY_NAME">
 <summary>Allows a process to keep data in physical memory, which prevents the system from paging the data to virtual memory on disk.
 Assigning this privilege can result in significant degradation of system performance. 
 
 This privilege is obsolete and is therefore never selected.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.MACHINE_ACCOUNT_NAME">
 <summary>Allows the user to add a computer to a specific domain. 
 For the privilege to be effective, it must be assigned to the user as part of local security policy for domain controllers in the domain.
 A user who has this privilege can add up to 10 workstations to the domain.

 In Windows 2000, the behavior of this privilege is duplicated by the Create Computer Objects permission for organizational units
 and the default Computers container in Active DirectorySUP>™ Users who have the Create Computer Objects permission can add an
 unlimited number of computers to the domain. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.MANAGE_VOLUME_NAME">
 <summary>Required to enable volume management privileges.
 User Right: Manage the files on a volume. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.PROF_SINGLE_PROCESS_NAME">
 <summary>Allows a user to run Microsoft® Windows NT® and Windows 2000 performance-monitoring tools to monitor the performance of nonsystem processes.
 By default, this privilege is assigned to Administrators and Power Users. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.REMOTE_SHUTDOWN_NAME">
 <summary>Allows a user to shut down a computer from a remote location on the network. (See also "Shut down the system" in this table.)
 By default, this privilege is assigned to Administrators. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.RESTORE_NAME">
 <summary>Allows a user to circumvent file and directory permissions when restoring backed-up files and directories
 and to set any valid security principal as the owner of an object. (See also "Back up files and directories" in this table.)
 By default, this privilege is assigned to Administrators and Backup Operators. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.SECURITY_NAME">
 <summary>Allows a user to specify object access auditing options for individual resources such as files,
 Active Directory objects, and registry keys. Object access auditing is not actually performed unless you have enabled
 it in Audit Policy (under Security Settings , Local Policies ). 
 
 A user who has this privilege also can view and clear the security log from Event Viewer.
 By default, this privilege is assigned to Administrators.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.SHUTDOWN_NAME">
 <summary>Allows a user to shut down the local computer. (See also "Force shutdown from a remote system" in this table.)
 
 In Microsoft® Windows® 2000 Professional, this privilege is assigned by default to Administrators, Backup Operators, Power Users, and Users.
 In Microsoft® Windows® 2000 Server, this privilege is by default not assigned to Users; it is assigned only to Administrators, Backup Operators, and Power Users.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.SYSTEMTIME_NAME">
 <summary>Allows the user to set the time for the internal clock of the computer.
 By default, this privilege is assigned to Administrators and Power Users. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.SYSTEM_ENVIRONMENT_NAME">
 <summary>Allows modification of system environment variables either by a process through an API or by a user through System Properties .
 By default, this privilege is assigned to Administrators. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.SYSTEM_PROFILE_NAME">
 <summary>Allows a user to run Windows NT and Windows 2000 performance-monitoring tools to monitor the performance of system processes.
 By default, this privilege is assigned to Administrators. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.TAKE_OWNERSHIP_NAME">
 <summary>Allows a user to take ownership of any securable object in the system, 
 including Active Directory objects, files and folders, printers, registry keys, processes, and threads.
 By default, this privilege is assigned to Administrators.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.TCB_NAME">
 <summary>Allows a process to authenticate like a user and thus gain access to the same resources as a user.
 Only low-level authentication services should require this privilege.
 
 Note that potential access is not limited to what is associated with the user by default;
 the calling process might request that arbitrary additional privileges be added to the access token.
 Note that the calling process can also build an anonymous token that does not provide a primary identity for tracking events in the audit log.

 When a service requires this privilege, configure the service to use the LocalSystem account (which already includes the privilege),
 rather than create a separate account and assign the privilege to it.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.UNDOCK_NAME">
 <summary>Allows the user of a portable computer to undock the computer by clicking Eject PC on the Start menu.
 By default, this privilege is assigned to Administrators, Power Users, and Users. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE.UNSOLICITED_INPUT_NAME">
 <summary>Required to read unsolicited input from a terminal device.
 User Right: Not applicable. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.ADJUST_DEFAULT">
 <summary>Required to change the default owner, primary group, or DACL of an access token.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.ADJUST_GROUPS">
 <summary>Required to adjust the attributes of the groups in an access token.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.ADJUST_PRIVILEGES">
 <summary>Required to enable or disable the privileges in an access token.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.ADJUST_SESSIONID">
 <summary>Required to adjust the session ID of an access token.
 The SE_TCB_NAME privilege is required.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.ASSIGN_PRIMARY">
 <summary>Required to attach a primary token to a process. 
 The SE_ASSIGNPRIMARYTOKEN_NAME privilege is also required to accomplish this task.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.DUPLICATE">
 <summary>Required to duplicate an access token.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.EXECUTE">
 <summary>Combines STANDARD_RIGHTS_EXECUTE and TOKEN_IMPERSONATE.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.IMPERSONATE">
 <summary>Required to attach an impersonation access token to a process.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.QUERY">
 <summary>Required to query an access token.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.QUERY_SOURCE">
 <summary>Required to query the source of an access token.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.READ">
 <summary>Combines STANDARD_RIGHTS_READ and TOKEN_QUERY.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.WRITE">
 <summary>Combines STANDARD_RIGHTS_WRITE, TOKEN_ADJUST_PRIVILEGES, TOKEN_ADJUST_GROUPS, and TOKEN_ADJUST_DEFAULT.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.ALL_ACCESS_P">
 <summary>Combines all possible access rights for a token.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.TOKENS.ALL_ACCESS">
 <summary>Combines all possible access rights for a token.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE_PRIVILEGE.ENABLED_BY_DEFAULT">
 <summary></summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE_PRIVILEGE.ENABLED">
 <summary>The function enables the privilege.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE_PRIVILEGE.REMOVED">
 <summary>The privilege is removed from the list of privileges in the token.
 The other privileges in the list are reordered to remain contiguous.
 
 SE_PRIVILEGE_REMOVED supersedes SE_PRIVILEGE_ENABLED.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SE_PRIVILEGE.USED_FOR_ACCESS">
 <summary></summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.OWNER_SECURITY_INFORMATION">
 <summary>The owner identifier of the object is being referenced.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.GROUP_SECURITY_INFORMATION">
 <summary>The primary group identifier of the object is being referenced.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.DACL_SECURITY_INFORMATION">
 <summary>The DACL of the object is being referenced.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.SACL_SECURITY_INFORMATION">
 <summary>The SACL of the object is being referenced.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.LABEL_SECURITY_INFORMATION">
 <summary>The mandatory integrity label is being referenced.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.UNPROTECTED_SACL_SECURITY_INFORMATION">
 <summary>The SACL inherits access control entries (ACEs) from the parent object.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.UNPROTECTED_DACL_SECURITY_INFORMATION">
 <summary>The DACL inherits ACEs from the parent object.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.PROTECTED_SACL_SECURITY_INFORMATION">
 <summary>The SACL cannot inherit ACEs.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.PROTECTED_DACL_SECURITY_INFORMATION">
 <summary>The DACL cannot inherit ACEs.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.ATTRIBUTE_SECURITY_INFORMATION">
 <summary>A SYSTEM_RESOURCE_ATTRIBUTE_ACE (section 2.4.4.15) is being referenced.</summary>
 <remarks>https://msdn.microsoft.com/en-us/library/hh877837.aspx</remarks>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.SCOPE_SECURITY_INFORMATION">
 <summary>A SYSTEM_SCOPED_POLICY_ID_ACE (section 2.4.4.16) is being referenced.</summary>
 <remarks>https://msdn.microsoft.com/en-us/library/hh877846.aspx</remarks>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Priviliges.SECURITY_INFORMATION.BACKUP_SECURITY_INFORMATION">
 <summary>The security descriptor is being accessed for use in a backup operation.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_UNKNOWN_OBJECT_TYPE">
 <summary>Unknown object type.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_FILE_OBJECT">
 <summary>Indicates a file or directory. 
 The name string that identifies a file or directory object can be in one of the following formats:
 
 - A relative path, such as FileName.dat or ..\FileName
 - An absolute path, such as FileName.dat, C:\DirectoryName\FileName.dat, or G:\RemoteDirectoryName\FileName.dat.
 - A UNC name, such as \\ComputerName\ShareName\FileName.dat.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_SERVICE">
 <summary>Indicates a Windows service. 
 A service object can be a local service, such as ServiceName, or a remote service, such as \\ComputerName\ServiceName.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_PRINTER">
 <summary>Indicates a printer.
 A printer object can be a local printer, such as PrinterName, or a remote printer, such as \\ComputerName\PrinterName.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_REGISTRY_KEY">
 <summary>Indicates a registry key. 
 A registry key object can be in the local registry, such as CLASSES_ROOT\SomePath or in a remote registry,
 such as \\ComputerName\CLASSES_ROOT\SomePath.
 
 The names of registry keys must use the following literal strings to identify the predefined registry keys:
 "CLASSES_ROOT", "CURRENT_USER", "MACHINE", and "USERS".</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_LMSHARE">
 <summary>Indicates a network share.
 A share object can be local, such as ShareName, or remote, such as \\ComputerName\ShareName.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_KERNEL_OBJECT">
 <summary>Indicates a local kernel object.
 The GetSecurityInfo and SetSecurityInfo functions support all types of kernel objects. 
 The GetNamedSecurityInfo and SetNamedSecurityInfo functions work only with the following kernel objects: 
 semaphore, event, mutex, waitable timer, and file mapping.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_WINDOW_OBJECT">
 <summary>Indicates a window station or desktop object on the local computer.
 You cannot use GetNamedSecurityInfo and SetNamedSecurityInfo with these objects
 because the names of window stations or desktops are not unique.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_DS_OBJECT">
 <summary>Indicates a directory service object or a property set or property of a directory service object.
 The name string for a directory service object must be in X.500 form, for example:

 CN=SomeObject,OU=ou2,OU=ou1,DC=DomainName,DC=CompanyName,DC=com,O=internet</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_DS_OBJECT_ALL">
 <summary>Indicates a directory service object and all of its property sets and properties. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_PROVIDER_DEFINED_OBJECT">
 <summary>Indicates a provider-defined object.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_WMIGUID_OBJECT">
 <summary>Indicates a WMI object.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.FileSystem.SE_OBJECT_TYPE.SE_REGISTRY_WOW64_32KEY">
 <summary>Indicates an object for a registry entry under WOW64. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_QUERY_VALUE">
 <summary>Permission to query subkey data.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_SET_VALUE">
 <summary>Permission to set subkey data.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_CREATE_SUB_KEY">
 <summary>Permission to create subkeys.
 Subkeys directly underneath the 'HKEY_LOCAL_MACHINE' and 'HKEY_USERS'
 predefined keys cannot be created even if this bit is set.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_ENUMERATE_SUB_KEYS">
 <summary>Permission to enumerate subkeys.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_CREATE_LINK">
 <summary>Permission to create a symbolic link.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_WOW64_64KEY">
 <summary>When set, indicates that a registry server on a 64-bit operating system operates on the 64-bit key namespace.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_WOW64_32KEY">
 <summary>When set, indicates that a registry server on a 64-bit operating system operates on the 32-bit key namespace.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_EXECUTE">
 <summary>Permission for read access.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_NOTIFY">
 <summary>Permission for change notification.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_READ">
 <summary>Combination of KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, and KEY_NOTIFY access.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_WRITE">
 <summary>Combination of KEY_SET_VALUE and KEY_CREATE_SUB_KEY access.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REGSAM.KEY_ALL_ACCESS">
 <summary>Combination of KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, KEY_NOTIFY, KEY_CREATE_SUB_KEY, KEY_CREATE_LINK, and KEY_SET_VALUE access.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REG_OPTION.NON_VOLATILE">
 <summary>This key is not volatile; this is the default.
 The information is stored in a file and is preserved when the system is restarted.
 The RegSaveKey function saves keys that are not volatile.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REG_OPTION.VOLATILE">
 <summary>All keys created by the function are volatile.
 The information is stored in memory and is not preserved when the corresponding registry hive is unloaded.
 For HKEY_LOCAL_MACHINE, this occurs only when the system initiates a full shutdown.
 For registry keys loaded by the RegLoadKey function, this occurs when the corresponding RegUnLoadKey is performed. 
 The RegSaveKey function does not save volatile keys. This flag is ignored for keys that already exist. 
 
 Note: On a user selected shutdown, a fast startup shutdown is the default behavior for the system.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REG_OPTION.CREATE_LINK">
 <summary>This key is a symbolic link. 
 The target path is assigned to the L"SymbolicLinkValue" value of the key.
 The target path must be an absolute registry path.
 
 Note: Registry symbolic links should only be used for for application compatibility when absolutely necessary.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REG_OPTION.BACKUP_RESTORE">
 <summary>If this flag is set, the function ignores the samDesired parameter and attempts to open the key with the access required to backup or restore the key. 
 If the calling thread has the SE_BACKUP_NAME privilege enabled, 
 the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights.
 
 If the calling thread has the SE_RESTORE_NAME privilege enabled, beginning with Windows Vista, 
 the key is opened with the ACCESS_SYSTEM_SECURITY, DELETE and KEY_WRITE access rights. 
 
 If both privileges are enabled, the key has the combined access rights for both privileges. 
 For more information, see Running with Special Privileges.</summary>
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/ms717802(v=vs.85).aspx</remarks>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REG_RESULT.REG_CREATED_NEW_KEY">
 <summary>The key did not exist and was created.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.ACL.Registry.REG_RESULT.REG_OPENED_EXISTING_KEY">
 <summary>The key existed and was simply opened without being changed.</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Win32.ACL.Registry.FixRights(System.String,Display_Driver_Uninstaller.LogEntry@)">
 <summary>
 Close key before using this and reopen after. Otherwise changes may not be applied!
 </summary>
 <param name="fullPath">Fullpath of regkey including beginning HKEY_ part
 eg.  HKEY_LOCAL_MACHINE\SOFTWARE\ATI</param>
 <returns>
 True = OK
 False = couldn't be fix'd or error thrown (added to log)</returns>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.INSTALLFLAG.NULL">
 <summary>Not used.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.INSTALLFLAG.FORCE">
 <summary>If this flag is set and the function finds a device that matches the HardwareId value, 
 the function installs new drivers for the device whether better drivers already exist on the computer.
 
 Important  Use this flag only with extreme caution. Setting this flag can cause an older driver to be installed over a newer driver,
 if a user runs the vendor's application after newer drivers are available.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.INSTALLFLAG.READONLY">
 <summary>
 If this flag is set, the function will not copy, rename, or delete any installation files.
 Use of this flag should be limited to environments in which file access is restricted or impossible, such as an "embedded" operating system.
 </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.INSTALLFLAG.NONINTERACTIVE">
 <summary>
 If this flag is set, the function will return FALSE when any attempt to display UI is detected.
 Set this flag only if the function will be called from a component (such as a service) that cannot display UI. 
 
 If this flag is set and a UI display is attempted, the device can be left in an indeterminate state.
 </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DEVICE_INSTALL_STATE.Installed">
 <summary>The device is installed.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DEVICE_INSTALL_STATE.NeedsReinstall">
 <summary>The system will try to reinstall the device on a later enumeration.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DEVICE_INSTALL_STATE.FailedInstall">
 <summary>The device did not install properly.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DEVICE_INSTALL_STATE.FinishInstall">
 <summary>The installation of this device is not yet complete.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDIT.NODRIVER">
 <summary>Not used.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDIT.CLASSDRIVER">
 <summary>Enumerate a class driver list. 
 This driver list type must be specified if DeviceInfoData is not specified.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDIT.COMPATDRIVER">
 <summary>Enumerate a list of compatible drivers for the specified device. 
 This driver list type can be specified only if DeviceInfoData is also specified.</summary>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.SetupAPI.SetupUOInfFlags">
 <summary>The SetupUninstallOEMInf function first checks whether there are any devices installed using the .inf file.
 A device does not need to be present to be detected as using the .inf file.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SetupUOInfFlags.NONE">
 <summary>If this flag is set and the function finds a currently installed device that was installed 
 using this .inf file, the .inf file is not removed.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SetupUOInfFlags.SUOI_FORCEDELETE">
 <summary>If this flag is set, the .inf file is removed whether the function finds a device that was installed with this .inf file.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIGCF.DEFAULT">
 <summary>Return only the device that is associated with the system default device interface,
 if one is set, for the specified device interface classes.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIGCF.PRESENT">
 <summary>Return only devices that are currently present in a system.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIGCF.ALLCLASSES">
 <summary>Return a list of installed devices for all device setup classes or all device interface classes.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIGCF.PROFILE">
 <summary>Return only devices that are a part of the current hardware profile.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIGCF.DEVICEINTERFACE">
 <summary>Return devices that support device interfaces for the specified device interface classes.
 This flag must be set in the Flags parameter if the Enumerator parameter specifies a device instance ID.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.DEVICEDESC">
 <summary>The function retrieves a REG_SZ string that contains the description of a device. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.HARDWAREID">
 <summary>The function retrieves a REG_MULTI_SZ string that contains the list of hardware IDs for a device.
 For information about hardware IDs, see Device Identification Strings.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.COMPATIBLEIDS">
 <summary>The function retrieves a REG_MULTI_SZ string that contains the list of compatible IDs for a device.
 For information about compatible IDs, see Device Identification Strings.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.UNUSED0">
 <summary>unused</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.SERVICE">
 <summary>The function retrieves a REG_SZ string that contains the service name for a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.UNUSED1">
 <summary>unused</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.UNUSED2">
 <summary>unused</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.CLASS">
 <summary>The function retrieves a REG_SZ string that contains the device setup class of a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.CLASSGUID">
 <summary>The function retrieves a REG_SZ string that contains the GUID that represents the device setup class of a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.DRIVER">
 <summary>The function retrieves a string that identifies the device's software key (sometimes called the driver key).
 For more information about driver keys, see Registry Trees and Keys for Devices and Drivers.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.CONFIGFLAGS">
 <summary>The function retrieves a bitwise OR of a device's configuration flags in a DWORD value.
 The configuration flags are represented by the CONFIGFLAG_Xxx bitmasks that are defined in Regstr.h.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.MFG">
 <summary>The function retrieves a REG_SZ string that contains the name of the device manufacturer.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.FRIENDLYNAME">
 <summary>The function retrieves a REG_SZ string that contains the friendly name of a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.LOCATION_INFORMATION">
 <summary>The function retrieves a REG_SZ string that contains the hardware location of a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.PHYSICAL_DEVICE_OBJECT_NAME">
 <summary>The function retrieves a REG_SZ string that contains the name that is associated with the device's PDO. 
 For more information, see IoCreateDevice.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.CAPABILITIES">
 <summary>The function retrieves a bitwise OR of the following CM_DEVCAP_Xxx flags in a DWORD.
 The device capabilities that are represented by these flags correspond to the device capabilities 
 that are represented by the members of the DEVICE_CAPABILITIES structure. 
 
 The CM_DEVCAP_Xxx constants are defined in Cfgmgr32.h.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.UI_NUMBER">
 <summary>The function retrieves a DWORD value set to the value of the UINumber member of the device's DEVICE_CAPABILITIES structure.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.UPPERFILTERS">
 <summary>The function retrieves a REG_MULTI_SZ string that contains the names of a device's upper filter drivers.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.LOWERFILTERS">
 <summary>The function retrieves a REG_MULTI_SZ string that contains the names of a device's lower-filter drivers.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.BUSTYPEGUID">
 <summary>The function retrieves the GUID for the device's bus type.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.LEGACYBUSTYPE">
 <summary>The function retrieves the device's legacy bus type as an INTERFACE_TYPE value (defined in Wdm.h and Ntddk.h).</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.BUSNUMBER">
 <summary>The function retrieves the device's bus number.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.ENUMERATOR_NAME">
 <summary>The function retrieves a REG_SZ string that contains the name of the device's enumerator.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.SECURITY">
 <summary>The function retrieves a SECURITY_DESCRIPTOR structure for a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.SECURITY_SDS">
 <summary>The function retrieves a REG_SZ string that contains the device's security descriptor.
 For information about security descriptor strings, see Security Descriptor Definition Language (Windows).
 For information about the format of security descriptor strings, see Security Descriptor Definition Language (Windows).</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.DEVTYPE">
 <summary>The function retrieves a DWORD value that represents the device's type. 
 For more information, see Specifying Device Types.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.EXCLUSIVE">
 <summary>The function retrieves a DWORD value that indicates whether a user can obtain exclusive use of the device.
 The returned value is one if exclusive use is allowed, or zero otherwise. For more information, see IoCreateDevice.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.CHARACTERISTICS">
 <summary>The function retrieves a bitwise OR of a device's characteristics flags in a DWORD.
 For a description of these flags, which are defined in Wdm.h and Ntddk.h,
 see the DeviceCharacteristics parameter of the IoCreateDevice function.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.ADDRESS">
 <summary>The function retrieves the device's address.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.UI_NUMBER_DESC_FORMAT">
 <summary>The function retrieves a format string (REG_SZ) used to display the UINumber value.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.DEVICE_POWER_DATA">
 <summary>(Windows XP and later) The function retrieves a CM_POWER_DATA structure that contains the device's power management information.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.REMOVAL_POLICY">
 <summary>(Windows XP and later) The function retrieves the device's current removal policy as a DWORD
 that contains one of the CM_REMOVAL_POLICY_Xxx values that are defined in Cfgmgr32.h.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.REMOVAL_POLICY_HW_DEFAULT">
 <summary>(Windows XP and later) The function retrieves the device's hardware-specified default removal policy as a DWORD
 that contains one of the CM_REMOVAL_POLICY_Xxx values that are defined in Cfgmgr32.h.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.REMOVAL_POLICY_OVERRIDE">
 <summary>(Windows XP and later) The function retrieves the device's override removal policy (if it exists) from the registry,
 as a DWORD that contains one of the CM_REMOVAL_POLICY_Xxx values that are defined in Cfgmgr32.h.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.INSTALL_STATE">
 <summary>(Windows XP and later) The function retrieves a DWORD value that indicates the installation state of a device.
 The installation state is represented by one of the CM_INSTALL_STATE_Xxx values that are defined in Cfgmgr32.h.
 The CM_INSTALL_STATE_Xxx values correspond to the DEVICE_INSTALL_STATE enumeration values. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.SPDRP.LOCATION_PATHS">
 <summary>(Windows Server 2003 and later) The function retrieves a REG_MULTI_SZ string that represents the location of the device in the device tree.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.SELECTDEVICE">
 <summary>A DIF_SELECTDEVICE request allows an installer to participate in selecting the driver for a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.INSTALLDEVICE">
 <summary>A DIF_INSTALLDEVICE request allows an installer to perform tasks before and/or after the device is installed.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.ASSIGNRESOURCES">
 <summary>This DIF code is reserved for system use. Vendor-supplied installers must not handle this request. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.PROPERTIES">
 <summary>This DIF code is obsolete and no longer supported in Microsoft Windows 2000 and later versions of Windows.
 To supply custom property pages for a device, an installer handles the DIF_ADDPROPERTYPAGE_ADVANCED request.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.REMOVE">
 <summary>A DIF_REMOVE request notifies an installer that Windows is about to remove a device and gives the installer an opportunity to prepare for the removal.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.FIRSTTIMESETUP">
 <summary>This DIF code is reserved for system use. Vendor-supplied installers must not handle this request.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.FOUNDDEVICE">
 <summary>Not used.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.SELECTCLASSDRIVERS">
 <summary>This DIF code is obsolete and no longer supported in Microsoft Windows 2000 and later versions of Windows.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.VALIDATECLASSDRIVERS">
 <summary>This DIF code is obsolete and no longer supported in Microsoft Windows 2000 and later versions of Windows.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.INSTALLCLASSDRIVERS">
 <summary>This DIF code is reserved for system use. Vendor-supplied installers must not handle this request.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.CALCDISKSPACE">
 <summary>This DIF code is reserved for system use. Vendor-supplied installers must not handle this request.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.DESTROYPRIVATEDATA">
 <summary>A DIF_DESTROYPRIVATEDATA request directs a class installer to free any memory or resources it allocated and
 stored in the ClassInstallReserved field of the SP_DEVINSTALL_PARAMS structure.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.VALIDATEDRIVER">
 <summary>his DIF code is obsolete and no longer supported in Microsoft Windows 2000 and later versions of Windows.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.DETECT">
 <summary>A DIF_DETECT request directs an installer to detect non-PnP devices of a particular class
 and add the devices to the device information set. This request is used for non-PnP devices.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.INSTALLWIZARD">
 <summary>This DIF code is obsolete and no longer supported in Microsoft Windows 2000 and later versions of Windows.
 For PnP devices, Windows uses the DIF_NEWDEVICEWIZARD_XXX requests instead, such as DIF_NEWDEVICEWIZARD_FINISHINSTALL.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.DESTROYWIZARDDATA">
 <summary>This DIF code is obsolete and no longer supported in Microsoft Windows 2000 and later versions of Windows.
 Windows uses the DIF_NEWDEVICEWIZARD_XXX requests instead, such as DIF_NEWDEVICEWIZARD_FINISHINSTALL.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.PROPERTYCHANGE">
 <summary>A DIF_PROPERTYCHANGE request notifies the installer that the device's properties are changing.
 The device is being enabled, disabled, started, stopped, or some item on a property page has changed.
 This DIF request gives the installer an opportunity to participate in the change.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.ENABLECLASS">
 <summary>This DIF code is reserved for system use. Vendor-supplied installers must not handle this request.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.DETECTVERIFY">
 <summary>This DIF code is reserved for system use. Vendor-supplied installers must not handle this request.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.INSTALLDEVICEFILES">
 <summary>A DIF_INSTALLDEVICEFILES request allows an installer to participate in copying the files to support a device
 or to make a list of the files for a device. The device files include files for the selected driver,
 any device interfaces, and any co-installers.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.UNREMOVE">
 <summary>A DIF_UNREMOVE request notifies the installer that Windows is about to reinstate a device in a given hardware profile
 and gives the installer an opportunity to participate in the operation. Windows only sends this request for non-PnP devices.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.SELECTBESTCOMPATDRV">
 <summary>A DIF_SELECTBESTCOMPATDRV request allows an installer to select the best driver from the device information element's compatible driver list.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.ALLOW_INSTALL">
 <summary>A DIF_ALLOW_INSTALL request asks the installers for a device whether Windows can proceed to install the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.REGISTERDEVICE">
 <summary>The DIF_REGISTERDEVICE request allows an installer to participate in registering a newly created device instance with the PnP manager.
 Windows sends this DIF request for non-PnP devices.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.NEWDEVICEWIZARD_PRESELECT">
 <summary>A DIF_NEWDEVICEWIZARD_PRESELECT request allows an installer to supply wizard pages that Windows displays to the user before it
 displays the select-driver page. This request is only used during manual installation of non-PnP devices.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.NEWDEVICEWIZARD_SELECT">
 <summary>A DIF_NEWDEVICEWIZARD_SELECT request allows an installer to supply custom wizard page(s) that replace the standard select-driver page.
 This request is only used during manual installation of non-PnP devices.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.NEWDEVICEWIZARD_PREANALYZE">
 <summary>A DIF_NEWDEVICEWIZARD_PREANALYZE request allows an installer to supply wizard pages that Windows displays to the user before it
 displays the analyze page. This request is only used during manual installation of non-PnP devices.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.NEWDEVICEWIZARD_POSTANALYZE">
 <summary>A DIF_NEWDEVICEWIZARD_POSTANALYZE request allows an installer to supply wizard pages that Windows displays to
 the user after the device node (devnode) is registered but before Windows installs the drivers for the device. 
 This request is only used during manual installation of non-PnP devices.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.NEWDEVICEWIZARD_FINISHINSTALL">
 <summary>A DIF_NEWDEVICEWIZARD_FINISHINSTALL request allows an installer to supply finish-install wizard pages that Windows displays
 to the user after a device is installed but before Windows displays the standard finish page. Windows sends this request when it 
 installs Plug and Play (PnP) devices and when an administrator uses the Add Hardware Wizard to install non-PnP devices.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.UNUSED1">
 <summary>Not used.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.INSTALLINTERFACES">
 <summary>A DIF_INSTALLINTERFACES request allows an installer to participate in the registration of the device interfaces for a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.DETECTCANCEL">
 <summary>This DIF code is reserved for system use. Vendor-supplied installers must not handle this request.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.REGISTER_COINSTALLERS">
 <summary>A DIF_REGISTER_COINSTALLERS request allows an installer to participate in the registration of device co-installers.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.ADDPROPERTYPAGE_ADVANCED">
 <summary>A DIF_ADDPROPERTYPAGE_ADVANCED request allows an installer to supply one or more custom property pages for a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.ADDPROPERTYPAGE_BASIC">
 <summary>This DIF code is reserved for system use. Vendor-supplied installers must not handle this request.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.RESERVED1">
 <summary>Not used.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.TROUBLESHOOTER">
 <summary>The DIF_TROUBLESHOOTER request allows an installer to start a troubleshooter for a device
 or to return CHM and HTM troubleshooter files for Windows to start.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.POWERMESSAGEWAKE">
 <summary>A DIF_POWERMESSAGEWAKE request allows an installer to supply custom text that
 Windows displays on the power management properties page of the device properties.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.ADDREMOTEPROPERTYPAGE_ADVANCED">
 <summary>A DIF_ADDPROPERTYPAGE_ADVANCED request allows an installer to supply one or more custom property pages for a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.UPDATEDRIVER_UI">
 <summary>This DIF code is reserved for system use. Vendor-supplied installers must not handle this request. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.FINISHINSTALL_ACTION">
 <summary>A DIF_FINISHINSTALL_ACTION request allows an installer to run finish-install actions in an
 interactive administrator context after all other device installation operations have completed.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DIF.RESERVED2">
 <summary>Not used.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DICS.ENABLE">
 <summary>The device is being enabled.
 
 For this state change, Windows enables the device if the DICS_FLAG_GLOBAL flag is specified.
 
 If the DICS_FLAG_CONFIGSPECIFIC flag is specified and the current hardware profile is specified then Windows enables the device.
 If the DICS_FLAG_CONFIGSPECIFIC is specified and not the current hardware profile then Windows sets some flags in the registry
 and does not change the device's state. Windows will change the device state when the specified profile becomes the current profile.
 </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DICS.DISABLE">
 <summary>The device is being disabled.
 
 For this state change, Windows disables the device if the DICS_FLAG_GLOBAL flag is specified.
 
 If the DICS_FLAG_CONFIGSPECIFIC flag is specified and the current hardware profile is specified then Windows disables the device.
 If the DICS_FLAG_CONFIGSPECIFIC is specified and not the current hardware profile then Windows sets some flags in the registry
 and does not change the device's state.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DICS.PROPCHANGE">
 <summary>The properties of the device have changed.
 
 For this state change, Windows ignores the Scope information as long it is a valid value, and stops and restarts the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DICS.START">
 <summary>
 
 The device is being started (if the request is for the currently active hardware profile).
 
 DICS_START must be DICS_FLAG_CONFIGSPECIFIC. You cannot perform that change globally.
 
 Windows only starts the device if the current hardware profile is specified. Otherwise,
 Windows sets a registry flag and does not change the state of the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DICS.STOP">
 <summary>The device is being stopped. 
 The driver stack will be unloaded and the CSCONFIGFLAG_DO_NOT_START flag will be set for the device.

 DICS_STOP must be DICS_FLAG_CONFIGSPECIFIC. You cannot perform that change globally.

 Windows only stops the device if the current hardware profile is specified. 
 Otherwise, Windows sets a registry flag and does not change the state of the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.SHOWOEM">
 <summary>Set to allow support for OEM disks. If this flag is set, the operating system presents a "Have Disk"
 button on the Select Device page. This flag is set, by default, in system-supplied wizards.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.SHOWCOMPAT">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.SHOWCLASS">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.SHOWALL">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.NOVCP">
 <summary>Set to disable creation of a new copy queue. 
 Use the caller-supplied copy queue in SP_DEVINSTALL_PARAMS.FileQueue.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.DIDCOMPAT">
 <summary>Set if SetupDiBuildDriverInfoList has already built a list of compatible drivers for this device.
 If this list has already been built, it contains all the driver information and this flag is always set.
 SetupDiDestroyDriverInfoList clears this flag when it deletes a compatible driver list.
 
 This flag is only set in device installation parameters that are associated with a particular device information element,
 not in parameters for a device information set as a whole.
 
 This flag is read-only. Only the operating system sets this flag.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.DIDCLASS">
 <summary>Set if SetupDiBuildDriverInfoList has already built a list of the drivers for this class of device.
 If this list has already been built, it contains all the driver information and this flag is always set.
 SetupDiDestroyDriverInfoList clears this flag when it deletes a list of drivers for a class.
 
 This flag is read-only. Only the operating system sets this flag.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.AUTOASSIGNRES">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.NEEDRESTART">
 <summary>The same as DI_NEEDREBOOT.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.NEEDREBOOT">
 <summary>For NT-based operating systems, this flag is set if the device requires that the computer be restarted after
 device installation or a device state change. A class installer or co-installer can set this flag at any time during
 device installation, if the installer determines that a restart is necessary.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.NOBROWSE">
 <summary>Set to disable browsing when the user is selecting an OEM disk path. 
 A device installation application sets this flag to constrain a user to only installing from the installation media location.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.MULTMFGS">
 <summary> Set by SetupDiBuildDriverInfoList if a list of drivers for a device setup class contains drivers that are provided by multiple manufacturers.

 This flag is read-only. Only the operating system sets this flag.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.DISABLED">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.GENERALPAGE_ADDED">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.RESOURCEPAGE_ADDED">
 <summary>Set by a class installer or co-installer if the installer supplies a page that replaces the system-supplied resource properties page. 
 If this flag is set, the operating system does not display the system-supplied resource page.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.PROPERTIES_CHANGE">
 <summary>Set by Device Manager if a device's properties were changed, which requires an update of the installer's user interface.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.INF_IS_SORTED">
 <summary>Set to indicate that the Select Device page should list drivers in the order in which 
 they appear in the INF file, instead of sorting them alphabetically. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.ENUMSINGLEINF">
 <summary>Set if installers and other device installation components should only search the INF file specified by SP_DEVINSTALL_PARAMS.DriverPath.
 If this flag is set, DriverPath contains the path of a single INF file instead of a path of a directory.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.DONOTCALLCONFIGMG">
 <summary>Set if the configuration manager should not be called to remove or reenumerate devices during the execution of certain device
 installation functions (for example, SetupDiInstallDevice).
 
 If this flag is set, device installation applications, class installers, and co-installers must not call the following functions:
 CM_Reenumerate_DevNode(_Ex)
 CM_Query_And_Remove_SubTree(_Ex)
 CM_Setup_DevNode(_Ex)
 CM_Set_HW_Prof_Flags(_Ex)
 CM_Enable_DevNode(_Ex)
 CM_Disable_DevNode(_Ex)</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.INSTALLDISABLED">
 <summary>Set if the device should be installed in a disabled state by default. 
 To be recognized, this flag must be set before Windows calls the default handler for the DIF_INSTALLDEVICE request.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.COMPAT_FROM_CLASS">
 <summary>Set to force SetupDiBuildDriverInfoList to build a device's list of compatible drivers
 from its class driver list instead of the INF file.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.CLASSINSTALLPARAMS">
 <summary>Set to use the Class Install parameters. SetupDiSetClassInstallParams sets this flag when the caller
 specifies parameters and clears the flag when the caller specifies a NULL parameters pointer. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.QUIETINSTALL">
 <summary>Set if the device installer functions must be silent and use default choices wherever possible.
 Class installers and co-installers must not display any UI if this flag is set.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.NOFILECOPY">
 <summary>Set if device installation applications and components, such as SetupDiInstallDevice, should skip file copying.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.DRIVERPAGE_ADDED">
 <summary>Set by a class installer or co-installer if the installer supplies a page that replaces the system-supplied driver properties page.
 If this flag is set, the operating system does not display the system-supplied driver page.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.USECI_SELECTSTRINGS">
 <summary>Set if a class installer or co-installer supplied strings that should be used during SetupDiSelectDevice.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.OVERRIDE_INFFLAGS">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.PROPS_NOCHANGEUSAGE">
 <summary>Obsolete.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.NOSELECTICONS">
 <summary>Obsolete.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI.NOWRITE_IDS">
 <summary>Set to prevent SetupDiInstallDevice from writing the INF-specified hardware IDs and compatible IDs to the device
 properties for the device node (devnode). This flag should only be set for root-enumerated devices.

 This flag overrides the DI_FLAGSEX_ALWAYSWRITEIDS flag.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.RESERVED2">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.RESERVED3">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.CI_FAILED">
 <summary>Set by the operating system if a class installer failed to load or start. This flag is read-only.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.DIDINFOLIST">
 <summary>Windows has built a list of driver nodes that includes all the drivers that are listed in the INF files of the specified setup class. 
 If the specified setup class is NULL because the HDEVINFO set or device has no associated class,
 the list includes all driver nodes from all available INF files. This flag is read-only.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.DIDCOMPATINFO">
 <summary>Windows has built a list of driver nodes that are compatible with the device. This flag is read-only.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.FILTERCLASSES">
 <summary>If set, SetupDiBuildClassInfoList will check for class inclusion filters.
 This means that a device will not be included in the class list if its class is marked as NoInstallClass.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.SETFAILEDINSTALL">
 <summary>Set if the installation failed. If this flag is set, the SetupDiInstallDevice function just sets the FAILEDINSTALL flag
 in the device's ConfigFlags registry value. If DI_FLAGSEX_SETFAILEDINSTALL is set, co-installers must return NO_ERROR in
 response to DIF_INSTALLDEVICE, while class installers must return NO_ERROR or ERROR_DI_DO_DEFAULT.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.ALWAYSWRITEIDS">
 <summary>If set and the DI_NOWRITE_IDS flag is clear, always write hardware and compatible IDs to the device properties for the devnode.
 This flag should only be set for root-enumerated devices.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.PROPCHANGE_PENDING">
 <summary>If set, the user made changes to one or more device property sheets. The property-page provider typically sets this flag.

 When the user closes the device property sheet, Device Manager checks the DI_FLAGSEX_PROPCHANGE_PENDING flag. 
 If it is set, Device Manager clears this flag, sets the DI_PROPERTIES_CHANGE flag, and sends a DIF_PROPERTYCHANGE request
 to the installers to notify them that something has changed.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.ALLOWEXCLUDEDDRVS">
 <summary>If set, include drivers that were marked "Exclude From Select."

 For example, if this flag is set, SetupDiSelectDevice displays drivers that have the Exclude From Select state
 and SetupDiBuildDriverInfoList includes Exclude From Select drivers in the requested driver list.

 A driver is "Exclude From Select" if either it is marked ExcludeFromSelect in the INF file or it is a driver for a device whose 
 whole setup class is marked NoInstallClass or NoUseClass in the class installer INF. Drivers for PnP devices are typically "Exclude From Select";
 PnP devices should not be manually installed. To build a list of driver files for a PnP device a caller of SetupDiBuildDriverInfoList must set this flag.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.NOUIONQUERYREMOVE">
 <summary>Obsolete.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.USECLASSFORCOMPAT">
 <summary>Filter INF files on the device's setup class when building a list of compatible drivers. 
 If a device's setup class is known, setting this flag reduces the time that is required to build a
 list of compatible drivers when searching INF files that are not precompiled. 
 
 This flag is ignored if DI_COMPAT_FROM_CLASS is set.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.RESERVED4">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.NO_DRVREG_MODIFY">
 <summary>Do not process the AddReg and DelReg entries for the device's hardware and software (driver) keys. 
 That is, the AddReg and DelReg entries in the INF file DDInstall and DDInstall.HW sections.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.IN_SYSTEM_SETUP">
 <summary>If set, installation is occurring during initial system setup. This flag is read-only.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.INET_DRIVER">
 <summary>If set, the driver was obtained from the Internet. Windows will not use the device's INF to install future devices
 because Windows cannot guarantee that it can retrieve the driver files again from the Internet.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.APPENDDRIVERLIST">
 <summary>If set, SetupDiBuildDriverInfoList appends a new driver list to an existing list.
 This flag is relevant when searching multiple locations.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.PREINSTALLBACKUP">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.BACKUPONREPLACE">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.DRIVERLIST_FROM_URL">
 <summary>If set, build the driver list from INF(s) retrieved from the URL that is specified in SP_DEVINSTALL_PARAMS.DriverPath.
 If the DriverPath is an empty string, use the Windows Update website.
 
 Currently, the operating system does not support URLs. 
 Use this flag to direct SetupDiBuildDriverInfoList to search the Windows Update website.
 
 Do not set this flag if DI_QUIETINSTALL is set.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.RESERVED1">
 <summary>Reserved.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.EXCLUDE_OLD_INET_DRIVERS">
 <summary>If set, do not include old Internet drivers when building a driver list.
 This flag should be set any time that you are building a list of potential drivers for a device.
 You can clear this flag if you are just getting a list of drivers currently installed for a device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.POWERPAGE_ADDED">
 <summary>If set, an installer added their own page for the power properties dialog.
 The operating system will not display the system-supplied power properties page.
 This flag is only relevant if the device supports power management.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.FILTERSIMILARDRIVERS">
 <summary>(Windows XP and later.) If set, SetupDiBuildDriverInfoList includes "similar" drivers when building a class driver list.
 A "similar" driver is one for which one of the hardware IDs or compatible IDs in the INF file partially (or completely) matches
 one of the hardware IDs or compatible IDs of the hardware.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DI_FLAGSEX.INSTALLEDDRIVER">
 <summary>(Windows XP and later.) If set, SetupDiBuildDriverInfoList includes only the currently installed driver
 when creating a list of class drivers or device-compatible drivers.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DICS_FLAG.GLOBAL">
 <summary>Make the change in all hardware profiles.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DICS_FLAG.CONFIGSPECIFIC">
 <summary>Make the change in the specified profile only.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DICS_FLAG.CONFIGGENERAL">
 <summary>Obsolete. Not used.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_REENUMERATE.ASYNCHRONOUS">
 <summary>Reenumeration should occur asynchronously. 
 The call to this function returns immediately after the PnP manager receives the reenumeration request. 
 If this flag is set, the CM_REENUMERATE_SYNCHRONOUS flag should not also be set.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_REENUMERATE.NORMAL">
 <summary>pecifies default reenumeration behavior, in which reenumeration occurs synchronously. 
 This flag is functionally equivalent to CM_REENUMERATE_SYNCHRONOUS.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_REENUMERATE.RETRY_INSTALLATION">
 <summary>Specifies that Plug and Play should make another attempt to install any devices in the specified subtree 
 that have been detected but are not yet configured, or are marked as needing reinstallation, or for which installation 
 must be completed. This flag can be set along with either the CM_REENUMERATE_SYNCHRONOUS flag or the CM_REENUMERATE_ASYNCHRONOUS flag. 
 This flag must be used with extreme caution, because it can cause the PnP manager to prompt the user to perform installation of any such devices. 
 Currently, only components such as Device Manager and Hardware Wizard use this flag, to allow the user to retry installation of devices that 
 might already have been detected but are not currently installed.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_REENUMERATE.SYNCHRONOUS">
 <summary>Reenumeration should occur synchronously. 
 The call to this function returns when all devices in the specified subtree have been reenumerated. 
 If this flag is set, the CM_REENUMERATE_ASYNCHRONOUS flag should not also be set. This flag is functionally equivalent to CM_REENUMERATE_NORMAL.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_LOCATE.DEVNODE_NORMAL">
 <summary>The function retrieves the device instance handle for the specified device only if the device is currently configured in the device tree.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_LOCATE.DEVNODE_PHANTOM">
 <summary>The function retrieves a device instance handle for the specified device if the device is currently configured in the device tree 
 or the device is a nonpresent device that is not currently configured in the device tree.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_LOCATE.DEVNODE_CANCELREMOVE">
 <summary>The function retrieves a device instance handle for the specified device if the device is currently configured in the device tree 
 or in the process of being removed from the device tree. If the device is in the process of being removed, the function cancels the removal of the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_LOCATE.DEVNODE_NOVALIDATION">
 <summary>Not used.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_DEVCAP.LOCKSUPPORTED">
 <summary>Specifies whether the device supports physical-device locking that prevents device ejection.
 This member pertains to ejecting the device from its slot, rather than ejecting a piece of removable media from the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_DEVCAP.EJECTSUPPORTED">
 <summary>Specifies whether the device supports software-controlled device ejection while the system is in the PowerSystemWorking state.
 This member pertains to ejecting the device from its slot, rather than ejecting a piece of removable media from the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_DEVCAP.REMOVABLE">
 <summary>Specifies whether the device can be dynamically removed from its immediate parent.
 If Removable is set to TRUE, the device does not belong to the same physical object as its parent.
 
 If Removable is set to TRUE, the device is displayed in the Unplug or Eject Hardware program,
 unless SurpriseRemovalOK is also set to TRUE.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_DEVCAP.DOCKDEVICE">
 <summary>Specifies whether the device is a docking peripheral.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_DEVCAP.UNIQUEID">
 <summary>Specifies whether the device's instance ID is unique system-wide.
 This bit is clear if the instance ID is unique only within the scope of the bus. For more information, see Device Identification Strings.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_DEVCAP.SILENTINSTALL">
 <summary>Specifies whether Device Manager should suppress all installation dialog boxes;
 except required dialog boxes such as "no compatible drivers found."</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_DEVCAP.RAWDEVICEOK">
 <summary>Specifies whether the driver for the underlying bus can drive the device if there is no function driver
 (for example, SCSI devices in pass-through mode). This mode of operation is called raw mode.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_DEVCAP.SURPRISEREMOVALOK">
 <summary>Specifies whether the function driver for the device can handle the case where the device is removed before Windows
 can send IRP_MN_QUERY_REMOVE_DEVICE to it. If SurpriseRemovalOK is set to TRUE, the device can be safely removed from its
 immediate parent regardless of the state that its driver is in.

 For example, a standard USB mouse does not maintain any state in its hardware and thus can be safely removed at any time.
 However, an external hard disk whose driver caches writes in memory cannot be safely removed without first letting the driver
 flush its cache to the hardware</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_DEVCAP.HARDWAREDISABLED">
 <summary>When set, this flag specifies that the device's hardware is disabled.
 
 A device's parent bus driver or a bus filter driver sets this flag when such a driver determines that the device hardware is disabled.
 The PnP manager sends one IRP_MN_QUERY_CAPABILITIES IRP right after a device is enumerated and sends another after the device has been started.
 The PnP manager only checks this bit right after the device is enumerated. Once the device is started, this bit is ignored.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_DEVCAP.NONDYNAMIC">
 <summary>Reserved for future use.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CR.SUCCESS">
 <summary>Success.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.ROOT_ENUMERATED">
 <summary>Was enumerated by ROOT</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.DRIVER_LOADED">
 <summary>Has Register_Device_Driver</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.ENUM_LOADED">
 <summary>Has Register_Enumerator</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.STARTED">
 <summary>Is currently configured</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.MANUAL">
 <summary>Manually installed</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.NEED_TO_ENUM">
 <summary>May need reenumeration</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.NOT_FIRST_TIME">
 <summary>Has received a config</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.HARDWARE_ENUM">
 <summary>Enum generates hardware ID</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.LIAR">
 <summary>Lied about can reconfig once</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.HAS_MARK">
 <summary>Not CM_Create_DevNode lately</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.HAS_PROBLEM">
 <summary>Need device installer</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.FILTERED">
 <summary>Is filtered</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.MOVED">
 <summary>Has been moved</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.DISABLEABLE">
 <summary>Can be rebalanced</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.REMOVABLE">
 <summary>Can be removed</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.PRIVATE_PROBLEM">
 <summary>Has a private problem</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.MF_PARENT">
 <summary>Multi function parent</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.MF_CHILD">
 <summary>Multi function child</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.WILL_BE_REMOVED">
 <summary>Devnode is being removed</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.NOT_FIRST_TIMEE">
 <summary>Has received a config enumerate</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.STOP_FREE_RES">
 <summary>When child is stopped, free resources</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.REBAL_CANDIDATE">
 <summary>Don't skip during rebalance</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.BAD_PARTIAL">
 <summary>This devnode's log_confs do not have same resources</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.NT_ENUMERATOR">
 <summary>This devnode's is an NT enumerator</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.NT_DRIVER">
 <summary>This devnode's is an NT driver</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.NEEDS_LOCKING">
 <summary>Devnode need lock resume processing</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.ARM_WAKEUP">
 <summary>Devnode can be the wakeup device</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.APM_ENUMERATOR">
 <summary>APM aware enumerator</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.APM_DRIVER">
 <summary>APM aware driver</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.SILENT_INSTALL">
 <summary>Silent install</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.NO_SHOW_IN_DM">
 <summary>No show in device manager</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.BOOT_LOG_PROB">
 <summary>Had a problem during preassignment of boot log conf</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.NEED_RESTART">
 <summary>System needs to be restarted for this Devnode to work properly</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.DRIVER_BLOCKED">
 <summary>One or more drivers are blocked from loading for this Devnode</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.LEGACY_DRIVER">
 <summary>This device is using a legacy driver</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.DN.CHILD_WITH_INVALID_ID">
 <summary>One or more children have invalid ID(s)</summary>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB">
 <summary>MSDN: Device Manager Error Messages</summary>
 <remarks>https://msdn.microsoft.com/en-us/library/windows/hardware/ff541422(v=vs.85).aspx</remarks>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.NOT_CONFIGURED">
 <summary>There is a device on the system for which there is no ConfigFlags registry entry.
 This means no driver is installed. Typically this means an INF file could not be found.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.OUT_OF_MEMORY">
 <summary>Running out of memory − the system is probably running low on system memory. </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.BOOT_CONFIG_CONFLICT">
 <summary>Boot config conflict</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.DEVLOADER_NOT_FOUND">
 <summary>Devloader not found</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.INVALID_DATA">
 <summary>Invalid device IDs have been detected.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.FAILED_START">
 <summary>The device failed to start.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.NORMAL_CONFLICT">
 <summary>Two devices have been assigned the same I/O ports, the same interrupt,
 or the same DMA channel (either by the BIOS, the operating system, or a combination of the two).</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.NEED_RESTART">
 <summary>The system must be restarted.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.PARTIAL_LOG_CONF">
 <summary>The device is only partially configured.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.UNKNOWN_RESOURCE">
 <summary>Unknown res type</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.REINSTALL">
 <summary>Drivers must be reinstalled.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.REGISTRY">
 <summary>A registry problem was detected.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.VXDLDR">
 <summary>WINDOWS 95 ONLY</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.WILL_BE_REMOVED">
 <summary>The system will remove the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.DISABLED">
 <summary>The device is disabled.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.DEVLOADER_NOT_READY">
 <summary>Devloader not ready</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.DEVICE_NOT_THERE">
 <summary>The device does not seem to be present.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.NO_VALID_LOG_CONF">
 <summary>No valid log config</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.FAILED_INSTALL">
 <summary>The device's drivers are not installed.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.HARDWARE_DISABLED">
 <summary>The device is disabled.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.CANT_SHARE_IRQ">
 <summary>Can't share IRQ</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.FAILED_ADD">
 <summary>A driver's attempt to add a device failed.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.DISABLED_SERVICE">
 <summary>The driver has been disabled.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.TRANSLATION_FAILED">
 <summary>Resource translation failed for the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.NO_SOFTCONFIG">
 <summary>The device requires a forced configuration.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.BIOS_TABLE">
 <summary>The MPS table is bad and has to be updated.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.IRQ_TRANSLATION_FAILED">
 <summary>The IRQ translation failed for the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.FAILED_DRIVER_ENTRY">
 <summary>The driver returned failure from its DriverEntry routine.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.DRIVER_FAILED_PRIOR_UNLOAD">
 <summary>The driver could not be loaded because a previous instance is still loaded.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.DRIVER_FAILED_LOAD">
 <summary>The driver could not be loaded.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.DRIVER_SERVICE_KEY_INVALID">
 <summary>Information in the registry's service key for the driver is invalid.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.LEGACY_SERVICE_NO_DEVICES">
 <summary>A driver was loaded but Windows cannot find the device.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.DUPLICATE_DEVICE">
 <summary>A duplicate device was detected.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.FAILED_POST_START">
 <summary>A driver has reported a device failure.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.HALTED">
 <summary>The device has been stopped.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.PHANTOM">
 <summary>The device is not present.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.SYSTEM_SHUTDOWN">
 <summary>The device is not available because the system is shutting down.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.HELD_FOR_EJECT">
 <summary>The device has been prepared for ejection.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.DRIVER_BLOCKED">
 <summary>The system will not load the driver because it is listed in the Windows Driver Protection database supplied by Windows Update.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.REGISTRY_TOO_LARGE">
 <summary>The registry is too large.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.SETPROPERTIES_FAILED">
 <summary>Device properties cannot be set.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.WAITING_ON_DEPENDENCY">
 <summary>The device did not start because it has a dependency on another device that has not started.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SetupAPI.CM_PROB.UNSIGNED_DRIVER">
 <summary>The device did not start on a 64-bit version of Windows because it has a driver that is not digitally signed.
 For more information about how to sign drivers, see Driver Signing.</summary>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.SystemRestore.RESTOREPOINTINFO">
 <summary>Contains information used by the SRSetRestorePoint function</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTOREPOINTINFO.dwEventType">
 <summary> The type of event</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTOREPOINTINFO.dwRestorePtType">
 <summary> The type of restore point.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTOREPOINTINFO.llSequenceNumber">
 <summary> The sequence number of the restore point. 
 To end a system change, set this to the sequence number returned by the previous call to SRSetRestorePoint.</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTOREPOINTINFO.szDescription">
 <summary> The description to be displayed so the user can easily identify a restore point</summary>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.SystemRestore.STATEMGRSTATUS">
 <summary>Contains status information used by the SRSetRestorePoint function</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.STATEMGRSTATUS.nStatus">
 <summary> The status code</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.STATEMGRSTATUS.llSequenceNumber">
 <summary> The sequence number of the restore point</summary>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE">
 <summary> Type of restorations</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE.APPLICATION_INSTALL">
 <summary> Installing a new application</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE.APPLICATION_UNINSTALL">
 <summary> An application has been uninstalled</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE.RESTORE">
 <summary> System Restore</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE.CHECKPOINT">
 <summary> Checkpoint</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE.DEVICE_DRIVER_INSTALL">
 <summary> Device driver has been installed</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE.FIRSTRUN">
 <summary> Program used for 1st time </summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE.MODIFY_SETTINGS">
 <summary> An application has had features added or removed</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE.CANCELLED_OPERATION">
 <summary> An application needs to delete the restore point it created</summary>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE.BACKUP_RECOVERY">
 <summary> Restoring a backup</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Win32.SystemRestore.SysRestoreAvailable">
 <summary>
 Verifies that the OS can do system restores
 </summary>
 <returns>True if OS is either ME,XP,Vista,7</returns>
</member>
<member name="M:Display_Driver_Uninstaller.Win32.SystemRestore.StartRestore(System.String,Display_Driver_Uninstaller.Win32.SystemRestore.RESTORE_TYPE,System.Int64@)">
 <summary>
 Starts system restore
 </summary>
 <param name="strDescription">The description of the restore</param>
 <returns>The status of call</returns>
</member>
<member name="M:Display_Driver_Uninstaller.Win32.SystemRestore.EndRestore(System.Int64)">
 <summary>
 Ends system restore call
 </summary>
 <param name="lSeqNum">The restore sequence number</param>
 <returns>The status of call</returns>
</member>
<member name="M:Display_Driver_Uninstaller.Win32.SystemRestore.CancelRestore(System.Int64)">
 <summary>
 Cancels restore call
 </summary>
 <param name="lSeqNum">The restore sequence number</param>
 <returns>The status of call</returns>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version1.IEnumWorkItems">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa380706(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version1.ITask">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381311(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version1.ITaskScheduler">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381811(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version1.ITaskTrigger">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381864(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version1.IProvideTaskPage">
 <remarks></remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version1.IScheduledWorkItem">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381216(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IAction">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa446895(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IActionCollection">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa446896(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IIdleSettings">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa380719(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IIdleTrigger">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa380724(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.INetworkSettings">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa380739(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IPrincipal">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa380742(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IRegisteredTask">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa380751(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IRegisteredTaskCollection">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa380752(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IRegistrationInfo">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa380773(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IRepetitionPattern">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381128(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IRunningTask">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381157(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.IRunningTaskCollection">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381166(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.ITaskDefinition">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381313(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.ITaskFolder">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381330(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.ITaskFolderCollection">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381332(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.ITaskService">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381832(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.TaskScheduler">
 <remarks></remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.ITaskSettings">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381843(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.ITrigger">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381887(v=vs.85).aspx</remarks>
</member>
<member name="T:Display_Driver_Uninstaller.Win32.TaskScheduler.Version2.ITriggerCollection">
 <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/aa381889(v=vs.85).aspx</remarks>
</member>
<member name="F:Display_Driver_Uninstaller.Win32.WinAPI.CLSID.SYSTEMX86">
 <summary>Version 5.0. The Windows System folder.
 A typical path is C:\Windows\System32.</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.AppExeFile">
 <summary>Fullpath to application's .Exe</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.AppBase">
 <summary>Fullpath to application's base directory (where .exe is)</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.Settings">
 <summary>Application's base directory + \Settings\</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.AppBaseRoaming">
 <summary>C:\%Users%\AppData\Roaming\DisplayDriverUnistaller\</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.Language">
 <summary>Application's base directory + \Settings\Langauges\</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.Logs">
 <summary>Application's base directory + \DDU Logs\</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.SystemDrive">
 <summary>System Drive ( "C:\" )</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.WinDir">
 <summary>Windows Directory ( "C:\Windows\" )</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.ProgramFiles">
 <summary>ProgramFiles Directory(32 and 64bits) ( "C:\Program Files\" )</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.System32">
 <summary>( "C:\windows\system32\" )</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.SysWOW64">
 <summary>( "C:\windows\sysWOW64\" )(64bit only)</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.ProgramFilesx86">
 <summary>ProgramFiles(x86) Directory(64bits only) ( "C:\Program Files (x86)\" )</summary>
</member>
<member name="P:Display_Driver_Uninstaller.AppPaths.Roaming">
 <summary>Roaming Directory ( "C:\%Users%\AppData\Roaming\" most likely C:\Windows\System32\comfig\systemprofile\AppData\Roaming\)</summary>
</member>
<member name="T:Display_Driver_Uninstaller.frmAbout">
<summary>
frmAbout
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.frmAbout.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Display_Driver_Uninstaller.frmLaunch">
<summary>
frmLaunch
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.frmLaunch.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Display_Driver_Uninstaller.frmLog">
<summary>
frmLog
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.frmLog.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="F:Display_Driver_Uninstaller.OSVersion.Unknown">
 <summary> [ 0.0 ] - Unsupported OS</summary>
</member>
<member name="F:Display_Driver_Uninstaller.OSVersion.WinXP">
 <summary> [ 5.1 ] - Windows XP</summary>
</member>
<member name="F:Display_Driver_Uninstaller.OSVersion.WinXPPro_Server2003">
 <summary> [ 5.2 ] - Windows XP (x64) or Server 2003</summary>
</member>
<member name="F:Display_Driver_Uninstaller.OSVersion.WinVista">
 <summary> [ 6.0 ] - Windows Vista or Server 2008</summary>
</member>
<member name="F:Display_Driver_Uninstaller.OSVersion.Win7">
 <summary> [ 6.1 ] - Windows 7 or Server 2008R2</summary>
</member>
<member name="F:Display_Driver_Uninstaller.OSVersion.Win8">
 <summary> [ 6.2 ] - Windows 8 or Server 2012</summary>
</member>
<member name="F:Display_Driver_Uninstaller.OSVersion.Win81">
 <summary> [ 6.3 ] - Windows 8.1</summary>
</member>
<member name="F:Display_Driver_Uninstaller.OSVersion.Win10">
 <summary> [ 6.4 / 10.0 ] - Windows 10</summary>
</member>
<member name="F:Display_Driver_Uninstaller.OSVersion.Win11">
 <summary> [ 6.5 / 11.0 ] - Windows 10</summary>
</member>
<member name="M:Display_Driver_Uninstaller.LogEntry.#ctor(System.Exception@)">
 <summary>DO NOT USE unless on STA Thread (MainThread)</summary>
</member>
<member name="T:Display_Driver_Uninstaller.DebugWindow">
<summary>
DebugWindow
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.DebugWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Tools.CompareStreams(System.IO.Stream,System.IO.Stream)">
 <summary>Compares two streams equality by using MD5 checksums</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Tools.StrAppend(System.Text.StringBuilder,System.String[])">
 <summary>Concats all given parameters to single text</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Tools.StrAppend(System.String[])">
 <summary>Concats all given parameters to single text</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Tools.StrReplace(System.Text.StringBuilder,System.String@,System.String@)">
 <summary>Replaces all given parameters from text (Case Sensitive!)</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Tools.StrReplace(System.String,System.String@,System.String@)">
 <summary>Replaces all given parameters from text (Case Sensitive!)</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Tools.StrRemoveAny(System.String,System.Boolean,System.String[])">
 <summary>Removes all given parameters from text (Case InSensitive!)</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Tools.StrContainsAny(System.String,System.Boolean,System.String[])">
 <summary>Check if text contains any of the given parameters</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Tools.StrEqual(System.String,System.Boolean,System.String[])">
 <summary>Check if text contains Equal of the given parameters</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Tools.MsgBox(System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
 <summary>Alias for MessageBox.Show(message) as defaults settings: only 'OK' button + 'Information' image</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Tools.MsgBox(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
 <summary>Alias for MessageBox.Show(message, title) as defaults settings: only 'OK' button + 'Information' image</summary>
</member>
<member name="T:Display_Driver_Uninstaller.Application">
<summary>
Application
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Application.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Application.Main">
<summary>
Application Entry Point.
</summary>
</member>
<member name="T:Display_Driver_Uninstaller.frmMain">
<summary>
frmMain
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.frmMain.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Display_Driver_Uninstaller.frmOptions">
<summary>
frmOptions
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.frmOptions.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:Display_Driver_Uninstaller.Languages.Load(Display_Driver_Uninstaller.Languages.LanguageOption)">
 <param name="langOption">Which language to load for use. Use 'Nothing' for defaul (English)</param>
</member>
<member name="M:Display_Driver_Uninstaller.Languages.GetParentTranslation(System.String,System.String,System.Boolean)">
 <param name="parent">Which form (Form1, fmrLaunch)</param>
 <param name="type">Name of propery (Me.Text)</param>
 <returns>Translated text. If language not found, return English text.</returns> 
</member>
<member name="M:Display_Driver_Uninstaller.Languages.GetTranslation(System.String,System.String,System.String,System.Boolean)">
 <param name="parent">In which form control is located (Form1, fmrLaunch)</param>
 <param name="control">Name of control, eg Button1</param>
 <param name="type">What attribute to return. Text, Tooltip etc.</param>
 <returns>Translated text. If language not found, return English text</returns> 
</member>
<member name="M:Display_Driver_Uninstaller.Languages.GetTranslationList(System.String,System.String,System.String,System.Boolean)">
 <param name="parent">In which form control is located (Form1, fmrLaunch)</param>
 <param name="control">Name of control, eg Button1</param>
 <param name="beginsWith">Begins with text. Useful for getting array of values (eg. ComboBox/ListBox)</param>
 <returns>Translated text array. If language not found, return as English</returns> 
</member>
<member name="M:Display_Driver_Uninstaller.Languages.TranslateForm(System.Windows.Window,System.Boolean)">
 <param name="window">Which window to translate (frmMain, frmLaunch etc)</param>
</member>
</members>
</doc>
